from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from datetime import datetime, timedelta

BOT_TOKEN = '7853937473:AAEFMDYSFML3T18yxu_XsLT54-q5_flmUeE'
ADMINS = [303542406, 458198861]

STYLE_KEYBOARD = ReplyKeyboardMarkup(
    keyboard=[
        ["üé§ –†—ç–ø", "üé∂ –ü–æ–ø", "üé∏ –†–æ–∫"],
        ["üî• –•–∏–ø-—Ö–æ–ø", "üî´ –î—Ä–∏–ª–ª", "üéß –¢–µ—Ö–Ω–æ"],
        ["üé∑ –î–∂–∞–∑", "üï∫ –†–æ–∫-–Ω-—Ä–æ–ª–ª", "üéª –ö–ª–∞—Å—Å–∏–∫–∞"],
        ["üéπ –ë–ª—é–∑", "üïä –°–æ—É–ª", "ü™© –î–∏—Å–∫–æ"],
        ["üåå –õ–æ—É—Ñ–∞–π", "ü™ó –§–æ–ª–∫", "ü§∑ –î—Ä—É–≥–æ–µ"]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

ACTION_KEYBOARD = ReplyKeyboardMarkup(
    keyboard=[["üîô –ù–∞–∑–∞–¥", "üóë –°–±—Ä–æ—Å–∏—Ç—å –∑–∞—è–≤–∫—É"]],
    resize_keyboard=True
)

CONFIRM_KEYBOARD = ReplyKeyboardMarkup(
    keyboard=[
        ["‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", "‚úè –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç"],
        ["üîô –ù–∞–∑–∞–¥", "üóë –°–±—Ä–æ—Å–∏—Ç—å –∑–∞—è–≤–∫—É"]
    ],
    resize_keyboard=True
)

GENRES = [
    "üé§ –†—ç–ø", "üé∂ –ü–æ–ø", "üé∏ –†–æ–∫", "üî• –•–∏–ø-—Ö–æ–ø", "üî´ –î—Ä–∏–ª–ª", "üéß –¢–µ—Ö–Ω–æ",
    "üé∑ –î–∂–∞–∑", "üï∫ –†–æ–∫-–Ω-—Ä–æ–ª–ª", "üéª –ö–ª–∞—Å—Å–∏–∫–∞", "üéπ –ë–ª—é–∑", "üïä –°–æ—É–ª", "ü™© –î–∏—Å–∫–æ",
    "üåå –õ–æ—É—Ñ–∞–π", "ü™ó –§–æ–ª–∫"
]

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞—è–≤–æ–∫ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
user_requests = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å —Ç—Ä–µ–∫–∞ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ üéµ",
        reply_markup=STYLE_KEYBOARD
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    text = update.message.text.strip()
    user_id = user.id
    username = f"@{user.username}" if user.username else "–ë–µ–∑ username"

    now = datetime.now()
    today_key = now.strftime('%Y-%m-%d')
    user_data = user_requests.setdefault(user_id, {})
    user_data.setdefault(today_key, [])

    if len(user_data[today_key]) >= 5 and not context.user_data.get("awaiting_confirmation"):
        await update.message.reply_text("‚ùó –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ 5 –∑–∞—è–≤–æ–∫ —Å–µ–≥–æ–¥–Ω—è. –ü—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞!")
        return

    if context.user_data.get("awaiting_custom_style"):
        if text == "üîô –ù–∞–∑–∞–¥":
            context.user_data.clear()
            await update.message.reply_text("‚¨Ö –í–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –∂–∞–Ω—Ä–∞", reply_markup=STYLE_KEYBOARD)
            return
        context.user_data["style"] = text
        context.user_data.pop("awaiting_custom_style")
        await update.message.reply_text(
            f"‚úÖ –°—Ç–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {text}\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç —Ç—Ä–µ–∫–∞.",
            reply_markup=ACTION_KEYBOARD
        )
        return

    if text == "üîô –ù–∞–∑–∞–¥":
        context.user_data.clear()
        await update.message.reply_text("‚¨Ö –í–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –∂–∞–Ω—Ä–∞", reply_markup=STYLE_KEYBOARD)
        return

    if text == "üóë –°–±—Ä–æ—Å–∏—Ç—å –∑–∞—è–≤–∫—É":
        context.user_data.clear()
        await update.message.reply_text("–ó–∞—è–≤–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ üîÅ", reply_markup=STYLE_KEYBOARD)
        return

    if text == "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å" and context.user_data.get("awaiting_confirmation"):
        style = context.user_data.get("style", "–ù–µ —É–∫–∞–∑–∞–Ω")
        text_content = context.user_data.get("text", "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞")
        formatted_msg = (
            f"üéß <b>–ó–∞—è–≤–∫–∞ –æ—Ç:</b> {username} (ID: <code>{user_id}</code>)\n"
            f"üéº <b>–°—Ç–∏–ª—å:</b> {style}\n"
            f"üìù <b>–¢–µ–∫—Å—Ç:</b>\n{text_content}"
        )
        for admin_id in ADMINS:
            await context.bot.send_message(chat_id=admin_id, text=formatted_msg, parse_mode="HTML")

        user_data[today_key].append(now)

        await update.message.reply_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –¢–≤–æ—è –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Ä–µ–ª–∏–∑—ã –º—ã –ø—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª–µ üëá",
            reply_markup=ReplyKeyboardRemove()
        )

        await update.message.reply_text(
            "–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(text="@musexfm", url="https://t.me/musexfm")],
                [InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É", callback_data="new_request")]
            ])
        )
        context.user_data.clear()
        return

    if text == "‚úè –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç" and context.user_data.get("awaiting_confirmation"):
        old_text = context.user_data.get("text", "")
        context.user_data.pop("awaiting_confirmation")
        await update.message.reply_text(
            f"‚úè –¢—ã –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π.\n\n"
            f"<em>–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–µ–∫—Å—Ç:</em>\n<code>{old_text}</code>",
            parse_mode="HTML"
        )
        return

    if text in GENRES:
        context.user_data["style"] = text
        await update.message.reply_text(
            f"–¢—ã –≤—ã–±—Ä–∞–ª —Å—Ç–∏–ª—å: {text} üé∂\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ç—Ä–µ–∫–∞.",
            reply_markup=ACTION_KEYBOARD
        )
        return

    if text == "ü§∑ –î—Ä—É–≥–æ–µ":
        context.user_data["awaiting_custom_style"] = True
        await update.message.reply_text(
            "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –∂–∞–Ω—Ä üéº (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–Ω–¥–∏, –ü–∞–Ω–∫, –ì—Ä–∞–Ω–∂...)\n\n–ò–ª–∏ –Ω–∞–∂–º–∏ üîô –ù–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è.",
            reply_markup=ReplyKeyboardMarkup(keyboard=[["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
        )
        return

    style = context.user_data.get("style", "–ù–µ —É–∫–∞–∑–∞–Ω")
    context.user_data["text"] = text
    preview = (
        f"üéº <b>–°—Ç–∏–ª—å:</b> {style}\n"
        f"üìù <b>–¢–µ–∫—Å—Ç:</b>\n{text}"
    )
    await update.message.reply_text(
        f"üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–∫–∏:\n\n{preview}\n\n–ù–∞–∂–º–∏ ‚úÖ —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ ‚úè —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç.",
        parse_mode="HTML",
        reply_markup=CONFIRM_KEYBOARD
    )
    context.user_data["awaiting_confirmation"] = True
    return

from telegram.ext import CallbackQueryHandler, Application

import asyncio

async def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(lambda update, context: start(update.callback_query, context), pattern="^new_request$"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ü–æ–ª–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≥–æ—Ç–æ–≤–∞.")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
